type Query {
  me: User! # uses JWT token in Authorization header to return the user
  listSports(first: Int!, after: String): SportPageInfo!
  listClubs(first: Int!, after: String): ClubPageInfo!
  listUserClubs(first: Int!, after: String): ClubPageInfo!
  getClub(id: ID!): Club!
  getSite(id: ID!): Site!
  getSiteImages(id: ID!): [FileUploadResponse!]!
  listSites(first: Int!, after: String): SitePageInfo!
  listSitesByClub(clubId: ID!, first: Int!, after: String): SitePageInfo!
  searchSites(
    query: SiteSearchQueryInput!
    first: Int!
    after: String
  ): SitePageInfo!
  getEvent(id: ID!): Event!
  listSiteEvents(cslId: ID!, first: Int!, after: String): EventPageInfo!
  listSubscriptionOptionsBySite(
    cslId: ID!
    first: Int!
    after: String
  ): SubscriptionOptionPageInfo!
  getSubscriptionOption(id: ID!): SubscriptionOption!
  listEnabledSubscriptionOptionsBySite(
    cslId: ID!
    first: Int!
    after: String
  ): SubscriptionOptionPageInfo!
  listSubscriptionsBySubscriptionOption(
    subscriptionOptionId: ID!
    first: Int!
    after: String
  ): SubscriptionPageInfo!
  listSubscriptionsBySite(
    cslId: ID!
    first: Int!
    after: String
  ): SubscriptionPageInfo!
  getSubscription(id: ID!): Subscription!
  listTrainersByClub(clubId: ID!, first: Int!, after: String): TrainerPageInfo!
  getFileUpload(id: ID!): FileUploadResponse!
}

type Mutation {
  signIn(email: String!, password: String!): String! # returns token
  signUp(email: String!, password: String!): String! # returns token
  createClub(name: String!): Club!
  deleteClub(id: ID!): Boolean!
  createTrainer(clubId: ID!, input: TrainerInput!): Trainer!
  deleteTrainer(id: ID!): Boolean!
  createSite(clubId: ID!, input: SiteInput!): Site
  deleteSite(id: ID!): Boolean!
  createSubscriptionOption(
    cslId: ID!
    input: SubscriptionOptionInput!
  ): SubscriptionOption!
  enableSubscriptionOption(id: ID!): SubscriptionOption!
  disableSubscriptionOption(id: ID!): SubscriptionOption!
  createSubscription(
    subscriptionOptionId: ID!
    details: SubscriberDetailsInput!
  ): Subscription!
  createEvent(cslId: ID!, input: EventInput!): Event!
  deleteEvent(id: ID!): Boolean!
  createFileUpload(input: FileUploadInput!): FileUploadResponse!
}

input SearchArea {
  topLeftLat: Float!
  topLeftLon: Float!
  bottomRightLat: Float!
  bottomRightLon: Float!
}

input SiteSearchQueryInput {
  sport: ID!
  address: String
  area: SearchArea
}

type User
  @entity(additionalFields: [{ path: "passwordHash", type: "string" }]) {
  id: ID @id
  email: String! @column
}

type Sport @entity {
  id: ID @id
  title: String! @column
  description: String! @column
  tags: [String!]! @column
}

type SportPageInfo {
  sports: [Sport!]!
  hasNextPage: Boolean!
  endCursor: String
}

type Club @entity {
  id: ID @id
  owner: String! @column # index
  name: String! @column # index
  logo: String @column
}

type ClubPageInfo {
  clubs: [Club!]!
  hasNextPage: Boolean!
  endCursor: String
}

input TrainerInput {
  firstname: String!
  lastname: String!
  displayname: String!
  description: String!
  photo: String
}

type Trainer @entity {
  id: ID @id
  firstname: String! @column
  lastname: String! @column
  displayname: String! @column
  description: String! @column
  club: Club @link # index
  photo: String @column
}

type TrainerPageInfo {
  trainers: [Trainer!]!
  hasNextPage: Boolean!
  endCursor: String
}

input EventInput {
  dateRFC3339: String!
  title: String!
  description: String!
  image: String
}

type Event @entity {
  id: ID @id
  site: String! @column # index
  dateRFC3339: String! @column
  title: String! @column
  description: String! @column
  image: String @column
}

type EventPageInfo {
  events: [Event!]!
  hasNextPage: Boolean!
  endCursor: String
}

input ActivityInput {
  name: String!
  description: String!
  icon: String
}

type Activity @entity(embedded: true) {
  name: String! @column
  description: String! @column
  icon: String @column
}

input CalendarSpanInput {
  title: String!
  day: Int!
  fromMinute: Int!
  toMinute: Int!
}

type CalendarSpan @entity(embedded: true) {
  title: String! @column
  day: Int! @column
  fromMinute: Int! @column
  toMinute: Int! @column
}

input SiteInput {
  name: String!
  sportId: ID!
  address: String!
  lat: Float!
  lon: Float!
  phone: String!
  website: String
  images: [String!]!
  description: String!
  activities: [ActivityInput!]!
  trainerIds: [ID!]!
  schedule: [CalendarSpanInput!]!
}

type Site @entity {
  id: ID @id
  name: String! @column #index
  club: Club! @link # index
  sport: Sport! @link # index
  address: String! @column # index (address is not unique but combination of club, sport and address is unique)
  lat: Float! @column
  lon: Float! @column
  phone: String! @column
  website: String @column
  images: [String!]! @column
  description: String! @column
  activities: [Activity!]! @embedded
  trainers: [Trainer!]! @link
  schedule: [CalendarSpan!]! @embedded
}

type SitePageInfo {
  sites: [Site!]!
  hasNextPage: Boolean!
  endCursor: String
}

input SubscriptionOptionInput {
  title: String!
  features: [String!]!
  price: Float!
}

type SubscriptionOption @entity {
  id: ID @id
  site: String! @column # index
  title: String! @column
  features: [String!]! @column
  price: Float! @column
  enabled: Boolean! @column
}

type SubscriptionOptionPageInfo {
  subscriptionOptions: [SubscriptionOption!]!
  hasNextPage: Boolean!
  endCursor: String
}

enum Gender {
  Male
  Female
  Other
}

input SubscriberDetailsInput {
  firstname: String!
  lastname: String!
  gender: Gender!
  email: String!
  address: String!
  phone: String!
  dateOfBirth: String!
}

type SubscriberDetails @entity(embedded: true) {
  firstname: String! @column
  lastname: String! @column
  gender: Gender! @column
  email: String! @column
  address: String! @column
  phone: String! @column
  dateOfBirth: String! @column
}

type Subscription @entity {
  id: ID @id
  subscriptionOption: SubscriptionOption! @link #index
  site: String! @column #index
  subscriberDetails: SubscriberDetails! @embedded
  createdAtRFC3339: String! @column
}

type SubscriptionPageInfo {
  subscriptions: [Subscription!]!
  hasNextPage: Boolean!
  endCursor: String
}

enum FileUploadKind {
  SiteImage
  EventImage
  TrainerPhoto
  ClubLogo
}

# unique key (index) is generated randomly
input FileUploadInput {
  size: Int!
  ext: String!
  kind: FileUploadKind!
}

# TODO: need periodic job to clean all files that are not linked to any object (use kind)
type FileUpload @entity(additionalFields: [{ path: "key", type: "string" }]) {
  id: ID @id
  size: Int! @column
  ext: String! @column
  kind: FileUploadKind! @column
}

type FileUploadResponse {
  file: FileUpload!
  url: String # s3 pre-signed url (GET or PUT)
}
