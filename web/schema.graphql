type Query {
  me: User! # uses JWT token in Authorization header to return the user
  listSports(first: Int!, after: String): SportPageInfo!
  listClubs(first: Int!, after: String): ClubPageInfo!
  getClub(id: ID!): Club!
  getClubSportLocation(id: ID!): ClubSportLocation!
  listClubSportLocations(first: Int!, after: String): ClubSportLocationPageInfo!
  listClubSportLocationsBySportAndArea(
    sport: ID!
    topLeftLat: Float!
    topLeftLon: Float!
    bottomRightLat: Float!
    bottomRightLon: Float!
    first: Int!
    after: String
  ): ClubSportLocationPageInfo!
  listClubSportLocationsBySportAndAddress(
    sport: ID!
    address: String!
    first: Int!
    after: String
  ): ClubSportLocationPageInfo!
}

type Mutation {
  signIn(email: String!, password: String!): String! # returns token
  signUp(email: String!, password: String!): String! # returns token
}

type User
  @entity(additionalFields: [{ path: "passwordHash", type: "string" }]) {
  id: ID @id
  email: String! @column
}

type Sport @entity {
  id: ID @id
  title: String! @column
  description: String! @column
  tags: [String!]! @column
}

type SportPageInfo {
  sports: [Sport!]!
  hasNextPage: Boolean!
  endCursor: String
}

type Club @entity {
  id: ID @id
  name: String! @column # index
  subtitle: String! @column
  logo: String! @column
}

type ClubPageInfo {
  clubs: [Club!]!
  hasNextPage: Boolean!
  endCursor: String
}

type ClubSportLocation @entity {
  id: ID @id
  club: Club! @link # index
  sport: Sport! @link # index
  address: String! @column # index (address is not unique but combination of club, sport and address is unique)
  lat: Float! @column
  lon: Float! @column
  # activities
}

type ClubSportLocationPageInfo {
  clubSportLocations: [ClubSportLocation!]!
  hasNextPage: Boolean!
  endCursor: String
}
